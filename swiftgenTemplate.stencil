// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% macro casesBlock assets type prefix %}
  {% for asset in assets %}
  {% if asset.type == type %}
  static var {% if prefix %}{{prefix}}{% endif %}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} : {{type|capitalize}} { {{type|capitalize}}("{{asset.value}}", bundle: .module) }
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
    {% set prefixed_asset %}{% if prefix == "" %}{{asset.name|lowerFirstWord|swiftIdentifier:"pretty"}}_{% else %}{{prefix}}{{asset.name|lowerFirstWord|swiftIdentifier:"pretty"}}_{% endif %}{% endset %}
    {% call casesBlock asset.items type prefixed_asset %}
  {% elif asset.items %}
  {% call casesBlock asset.items type prefix %}
  {% endif %}
  {% endfor %}
{% endmacro %}
import SwiftUI

{{accessModifier}} extension Color {
  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  // {{catalog.name}}.xcassets
    {% set prefixed_catalog %}{{catalog.name|swiftIdentifier:"pretty"|lowerFirstWord}}_{% endset %}
    {% if forceNamespaces == "true" %} {% call casesBlock catalog.assets "color" prefixed_catalog %}{% else %}{% call casesBlock catalog.assets "color" "" %}{% endif %}
  {% endfor %}
  {% else %}
  // {{catalogs.first.name}}.xcassets
  {% set prefixed_catalog %}{{catalogs.first.name|swiftIdentifier:"pretty"|lowerFirstWord}}_{% endset %}
  {% if forceNamespaces == "true" %} {% call casesBlock catalogs.first.assets "color" prefixed_catalog %}{% else %}{% call casesBlock catalogs.first.assets "color" "" %}{% endif %}
  {% endif %}
}

public extension UIColor {
  {% for catalog in catalogs %}
    {% for asset in catalog.assets %}
      {% for item in asset.items %}
    static let {{item.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = UIColor(named: "{{ item.name }}", in: .module, compatibleWith: .current)!
      {% endfor %}  
    {% endfor %}
  {% endfor %}
}

{{accessModifier}} extension Image {
  {% if catalogs.count > 1 %}
  {% for catalog in catalogs %}
  // {{catalog.name}}.xcassets
    {% set prefixed_catalog %}{{catalog.name|swiftIdentifier:"pretty"|lowerFirstWord}}_{% endset %}
    {% if forceNamespaces == "true" %} {% call casesBlock catalog.assets "image" prefixed_catalog %}{% else %}{% call casesBlock catalog.assets "image" "" %}{% endif %}
  {% endfor %}
  {% else %}
  // {{catalogs.first.name}}.xcassets
  {% set prefixed_catalog %}{{catalogs.first.name|swiftIdentifier:"pretty"|lowerFirstWord}}_{% endset %}
  {% if forceNamespaces == "true" %} {% call casesBlock catalogs.first.assets "image" prefixed_catalog %}{% else %}{% call casesBlock catalogs.first.assets "image" "" %}{% endif %}
  {% endif %}
}

{{accessModifier}} extension UIImage {
 {% for catalog in catalogs %}
    {% for asset in catalog.assets %}
      {% if asset.type == "image" %}
    static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = UIImage(named: "{{ asset.name }}", in: .module, with: nil)!
      {% endif %}
    {% endfor %}
  {% endfor %}
}

{% if resourceCount.image > 0 %}
{% endif %}
private final class BundleToken {
  static let bundle: Bundle = {
    Bundle(for: BundleToken.self)
  }()
}
{% else %}
// No assets found
{% endif %}